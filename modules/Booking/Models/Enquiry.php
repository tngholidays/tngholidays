<?php
namespace Modules\Booking\Models;

use App\BaseModel;
use Modules\Lead\Models\LeadHistory;
use Modules\Location\Models\Location;
use Modules\Booking\Models\BookingProposal;
class Enquiry extends BaseModel
{
    protected $table = 'bravo_enquiries';

    protected $fillable = [
        'object_id',
        'object_model',
        'enquiry_type',
        'name',
        'email',
        'phone',
        'city',
        'date',
        'num_of_person',
        'destination',
        'duration',
        'person_types',
        'approx_date',
        'note',
        'labels',
        'is_runo_api',
        'source',
        'status',
        'vendor_id',
        'assign_to'
    ];
    protected $casts = [
        'person_types' => 'array',
        'labels' => 'array',
    ];

    public static $enquiryStatus = [
        'pending',
        'completed',
        'cancel',
    ];

    public function fill(array $attributes)
    {
        if (!empty($attributes)) {
            foreach ($this->fillable as $item) {
                $attributes[$item] = $attributes[$item] ?? null;
            }
        }
        return parent::fill($attributes); // TODO: Change the autogenerated stub
    }

    public function service()
    {
        $all = get_bookable_services();
        if ($this->object_model and !empty($all[$this->object_model])) {
            return $this->hasOne($all[$this->object_model], 'id', 'object_id');
        }
        return null;
    }
    public function getLastUserActivity(){
        $his = LeadHistory::select('type','content','created_at')->where('phone',  $this->phone)->orderBy('id','DESC')->first();
        $result = null;
        if(!empty($his)){
            $his->content = $his->content.', '.date("d M y h:i A",strtotime($his->created_at));
            if($his->type == 'email'){
            $result = 'E-Mail Sent - '.$his->content;
            }elseif($his->type == 'comment'){
                $result = 'Comment Added - '.$his->content;
            }elseif($his->type == 'whatsapp'){
                $result = 'Send Whatsapp Message - '.$his->content;
            }elseif($his->type == 'reminder'){
                $result = 'Reminder Added - '.$his->content;
            }
        }
        return $result;
    }
    public function getLocationById(){
        $data = Location::select('name')->where('id',$this->destination)->first();
        return @$data->name;
    }
    public function bookingProposal()
    {
        $row = BookingProposal::select('id','tour_id','booking_status','tour_details')->where("enquiry_id", $this->id)->where("status", 'publish')->first();
        return $row;
    }
     public function booking()
    {
        return $this->hasOne(Booking::class, 'id', 'booking_id');
    }
    public function getStatusNameAttribute()
    {
        return booking_status_to_text($this->status);
    }
    public function AssignUser()
    {
        return $this->hasOne("App\User", "id", 'assign_to');
    }
    public function CreateUser()
    {
        return $this->hasOne("App\User", "id", 'create_user');
    }
    public function UpdateUser()
    {
        return $this->hasOne("App\User", "id", 'update_user');
    }
}
